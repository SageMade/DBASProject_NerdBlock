using System;

namespace NerdBlock.Engine.Backend
{
    /// <summary>
    /// Represents an attribute for a model that marks it as a model with the system
    /// </summary>
    public class DataModel : Attribute
    {
        /// <summary>
        /// The underlying table name
        /// </summary>
        public string TableName;

        /// <summary>
        /// Creates a new DataModel attribute
        /// </summary>
        /// <param name="tableName"></param>
        public DataModel(string tableName)
        {
            TableName = tableName;
        }
    }

    /// <summary>
    /// Represents an attribute for a property in a model that marks it as a database field with the system
    /// </summary>
    public class DataField : Attribute
    {
        /// <summary>
        /// The underlying databse field name
        /// </summary>
        public string FieldName;
        /// <summary>
        /// The database type for this field
        /// </summary>
        public QueryParamType FieldType;

        /// <summary>
        /// Creates a new DataField attribute
        /// </summary>
        /// <param name="fieldName">The name of the field in the database</param>
        /// <param name="fieldType">The database parameter type for the field</param>
        public DataField(string fieldName, QueryParamType fieldType)
        {
            FieldName = fieldName;
            FieldType = fieldType;
        }
    }

    /// <summary>
    /// Represents an attribute for a data field in a model that marks it as the primary key for 
    /// the model
    /// </summary>
    public class PrimaryKey : Attribute
    {

    }

    /// <summary>
    /// Represents an attribute for a data field in a model that marks it as a foreign key to another
    /// table
    /// </summary>
    public class ForeignKey : Attribute
    {
        /// <summary>
        /// The underlying databse field name in the foreign table
        /// </summary>
        public string TableName;
        /// <summary>
        /// The field name in the foreign table
        /// </summary>
        public string FieldName;

        /// <summary>
        /// Creates a new foreign key attribute
        /// </summary>
        /// <param name="tableName">The name of the foreign key</param>
        /// <param name="fieldName">The name of the field to reference in the foreign table</param>
        public ForeignKey(string tableName, string fieldName)
        {
            TableName = tableName;
            FieldName = fieldName;
        }
    }

    /// <summary>
    /// Marks a data field as an auto-generated value
    /// </summary>
    public class AutoGenerated : Attribute { }

    /// <summary>
    /// Marks a data field as a nullable
    /// </summary>
    public class Nullable : Attribute { }
}
